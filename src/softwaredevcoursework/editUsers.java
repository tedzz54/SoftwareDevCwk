/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package softwaredevcoursework;

import java.sql.Connection;
import java.sql.Driver;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author theod
 */
public class editUsers extends javax.swing.JFrame {

    /**
     * Creates new form assignAdmins
     */
    public editUsers() {
        initComponents();
        showData();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        removeAdminButton = new javax.swing.JButton();
        makeAdminButton = new javax.swing.JButton();
        jTextField_ID = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextField_Username = new javax.swing.JTextField();
        jTextField_Email = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        deleteUser = new javax.swing.JButton();
        createUser = new javax.swing.JButton();
        updateUser = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Username", "Email"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        removeAdminButton.setText("Remove Admin");
        removeAdminButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeAdminButtonActionPerformed(evt);
            }
        });

        makeAdminButton.setText("Make Admin");
        makeAdminButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                makeAdminButtonActionPerformed(evt);
            }
        });

        jTextField_ID.setText("DEFAULT");
        jTextField_ID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField_IDActionPerformed(evt);
            }
        });

        jLabel1.setText("ID:");

        jLabel2.setText("Username:");

        jTextField_Username.setText("DEFAULT");
        jTextField_Username.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField_UsernameActionPerformed(evt);
            }
        });

        jTextField_Email.setText("DEFAULT");
        jTextField_Email.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField_EmailActionPerformed(evt);
            }
        });

        jLabel3.setText("Email:");

        deleteUser.setText("Delete User");
        deleteUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteUserActionPerformed(evt);
            }
        });

        createUser.setText("Create User");
        createUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createUserActionPerformed(evt);
            }
        });

        updateUser.setText("Update");
        updateUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateUserActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel1)))
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(removeAdminButton, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(makeAdminButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(deleteUser, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(createUser, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(updateUser, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE)
                                .addComponent(jTextField_ID)
                                .addComponent(jTextField_Username)
                                .addComponent(jTextField_Email))
                            .addGap(0, 0, Short.MAX_VALUE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 125, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField_ID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField_Username, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField_Email, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(updateUser)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(createUser)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(deleteUser)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(makeAdminButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(removeAdminButton)
                        .addGap(54, 54, 54))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void makeAdminButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_makeAdminButtonActionPerformed
        makeAdmin();
    }//GEN-LAST:event_makeAdminButtonActionPerformed

    private void removeAdminButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeAdminButtonActionPerformed
        removeAdmin();
    }//GEN-LAST:event_removeAdminButtonActionPerformed

    private void jTextField_IDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField_IDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField_IDActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        int row = jTable1.getSelectedRow();
        DefaultTableModel tblModel = (DefaultTableModel) jTable1.getModel();
        jTextField_ID.setText(tblModel.getValueAt(row,0).toString());
        jTextField_Username.setText(tblModel.getValueAt(row,1).toString());
        jTextField_Email.setText(tblModel.getValueAt(row,2).toString());
    }//GEN-LAST:event_jTable1MouseClicked

    private void jTextField_UsernameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField_UsernameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField_UsernameActionPerformed

    private void jTextField_EmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField_EmailActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField_EmailActionPerformed

    private void deleteUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteUserActionPerformed
        Connection connection = CustomerDatabase.getConnection();
        DefaultTableModel tblModel = (DefaultTableModel) jTable1.getModel();
        int row = jTable1.getSelectedRow();
        String cell = jTable1.getModel().getValueAt(row, 0).toString();
        String cell1 = jTable1.getModel().getValueAt(row, 1).toString();
        String sql = "DELETE FROM User WHERE userID = " + cell;
        try {

            // I will be checking to see if a row is selected
            if (jTable1.getSelectedRowCount() == 1) {
                // If one row is selected then delete the given row
                Statement statement = connection.createStatement();
                statement.executeUpdate(sql);
                tblModel.removeRow(jTable1.getSelectedRow());

                JOptionPane.showMessageDialog(this,"User " + cell1 + " has been deleted!");
            } else if (jTable1.getRowCount() == 0) {
                // If there are no rows present in the table then table is empty
                JOptionPane.showMessageDialog(this, "The table is empty!");
            } else {
                // else there are multiple rows selected
                JOptionPane.showMessageDialog(this, "Please select a single user!");
            }

        } catch (Exception ex) {
            System.out.println("Error - " + ex);
        }

    }//GEN-LAST:event_deleteUserActionPerformed

    private void createUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createUserActionPerformed
        createAccount createUser = new createAccount();
        createUser.setVisible(true);

    }//GEN-LAST:event_createUserActionPerformed

    private void updateUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateUserActionPerformed
        updateUser();
        showData();
    }//GEN-LAST:event_updateUserActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(editUsers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(editUsers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(editUsers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(editUsers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new editUsers().setVisible(true);
            }
        });
    }
    
    
     public void showData(){
        String urlSQLite = "jdbc:sqlite:CustomerDatabase.db";
        Connection connection = null;

        try {

            Driver driverSQLite = new org.sqlite.JDBC();
            DriverManager.registerDriver(driverSQLite);
            System.out.println("SQLite Driver loaded up successfuly!");
            Connection con = DriverManager.getConnection(urlSQLite);
            System.out.println("Connected to the database!");

            Statement st = con.createStatement();
            String sql = "SELECT userID, userName, userEmail, adminPriv FROM User";
            ResultSet resultSet2 = st.executeQuery(sql);

            while (resultSet2.next()) {
                String userID = resultSet2.getString("userID");

                String userName = resultSet2.getString("userName");
                String userEmail = resultSet2.getString("userEmail");
                Boolean adminPriv = resultSet2.getBoolean("adminPriv");

                String DBdata[] = {userID, userName, userEmail};
                DefaultTableModel tblModel = (DefaultTableModel) jTable1.getModel();

                tblModel.addRow(DBdata);

            }

            connection.close();

        } catch (Exception ex) {
            System.out.println("Error " + ex.getMessage());
        }
    }
     
    public void makeAdmin(){
        Connection connection = CustomerDatabase.getConnection();
        int row = jTable1.getSelectedRow();
        String cell = jTable1.getModel().getValueAt(row, 0).toString();
        String cell1 = jTable1.getModel().getValueAt(row, 1).toString();
        String sql = "UPDATE User SET adminPriv = '" + true + "'WHERE userID = " + cell;
        
        try {
            // I will be checking to see if a row is selected
            if (jTable1.getSelectedRowCount() == 1) {
                // If one row is selected then execute query
                Statement statement = connection.createStatement();
                statement.executeUpdate(sql);
                JOptionPane.showMessageDialog(this,"User " + cell1 + " has recieved admin privileges!");
                
            } else if (jTable1.getRowCount() == 0) {
                // If there are no rows present in the table then table is empty
                JOptionPane.showMessageDialog(this, "The table is empty!");
            } else {
                // else there are multiple rows selected
                JOptionPane.showMessageDialog(this, "Please select a single user!");
            }
            

            
        } catch(Exception e) {
            System.out.println("Error - " + e);
        }
    }
    
    public void removeAdmin(){
        Connection connection = CustomerDatabase.getConnection();
        int row = jTable1.getSelectedRow();
        String cell = jTable1.getModel().getValueAt(row, 0).toString();
        String cell1 = jTable1.getModel().getValueAt(row, 1).toString();
        String sql = "UPDATE User SET adminPriv = '" + false + "'WHERE userID = " + cell;
        try {
            // I will be checking to see if a row is selected
            if (jTable1.getSelectedRowCount() == 1) {
                // If one row is selected then execute query
                Statement statement = connection.createStatement();
                statement.executeUpdate(sql);

                
                JOptionPane.showMessageDialog(this,"User " + cell1 + " has had their admin privileges revoked!");
            } else if (jTable1.getRowCount() == 0) {
                // If there are no rows present in the table then table is empty
                JOptionPane.showMessageDialog(this, "The table is empty!");
            } else {
                // else there are multiple rows selected
                JOptionPane.showMessageDialog(this, "Please select a single user!");
            }
            

            
        } catch(Exception e) {
            System.out.println("Error - " + e);
        }
    }
    
    public void updateUser(){
        Connection connection = CustomerDatabase.getConnection();
        String sql = "UPDATE User SET userName = '" + jTextField_Username.getText() + "', userEmail = '" + jTextField_Email.getText() + "' WHERE userID = " + jTextField_ID.getText();
        try {
            Statement statement = connection.createStatement();
            statement.executeUpdate(sql);
            JOptionPane.showMessageDialog(this, "User updated!");
            
            DefaultTableModel tblModel = (DefaultTableModel) jTable1.getModel();
            tblModel.setRowCount(0);
            
            
        } catch (Exception ex){
            System.out.println("Error - " + ex);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton createUser;
    private javax.swing.JButton deleteUser;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField_Email;
    private javax.swing.JTextField jTextField_ID;
    private javax.swing.JTextField jTextField_Username;
    private javax.swing.JButton makeAdminButton;
    private javax.swing.JButton removeAdminButton;
    private javax.swing.JButton updateUser;
    // End of variables declaration//GEN-END:variables
}
